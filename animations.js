// Quand on clique sur un Bouton :
// Des rectangles sont anim√©s
// L'animation fonctionne dans les deux sens

// I Cr√©er les blocs en HTML
// II Cr√©er les styles CSS (couleur sur nos blocs, transition CSS)
// III JS : 
// 1. Selectionner le bouton + cartes/rectangles
// 2. Impl√©menter l'ecoute d'un √©v√®nement clique
// 3. Action qui s'applique / Fonction

const button = document.querySelector("button");

const cards = document.querySelectorAll('.cards');



button.addEventListener("click", function () {


    for (i = 0; i < 5; i++) {
      cards[i].classList.toggle("active");
      cards[i].style.transitionDelay = (0.15 * i) + "s";
    }
});



//Lorsque je clique sur le bouton : 
// Des rectangles nomm√©s cards sont anim√©s et apparaissent avec la possibilit√© de cliquer sur des boutons
//Les cards peuvent alors apparaitre et etre ranger. Les deux sens fonctionnent

//Je cr√©e donc les blocs HTML
//Je cr√©e aussi les blocs CSS que je lie √† mon HTML
//Ensuite je cr√©e une page Javascript que je lie avec mon HTML juste au dessus de la balise </body>

//1. Je commence donc par cr√©er 2 constantes qui vont d√©clarer une r√©ference constante dans la suite de mon code
//Dans les deux const utilis√©s, j'utilise la m√©thode de l'interface Document pour utiliser querySelector et querySelectorAll 
//afin de cr√©er une boucle

//2. La deuxi√®me √©tape consiste √† √©couter un √©venement : c'est √† dire utiliser un addEvenListener pour la class bouton et 
//de lui ajouter la fonction "clique" afin de r√©gir √† un √©venement. Cela va envoyer un √©lement √† sa cible √† chaque fois que 
//la fonction est appel√©e.

//3. - La fonction √† appeler est donc une boucle "for" que l'on utilise pour executer un code un ceratin nombre de fois.
//   - i=0 car il s'agit de l'expression initiale, i<5 il s'agit de la condition : parmi mes 5 cards la boucle  fonctionnera 
//si les 5 cards n'ont pas √©t√© activ√©es
//   - Utilisation de classList et toggle pour modifier un √©lements et y ajouter une classe : classList va renvoyer le nom
//de ma class ("active") en CSS et toggle va permettre d'effectuer lamodification de la classe afin de supprimer/cacher/ajouter
//des √©lements.
//   - Enfin on utilise le transitionDelay afin de r√©aliser un temps de transition entre les mouvements effectu√©s
//  mes 5 cards : un espace de 0.15 secondes est effectu√© entre chaque transition de cards allant de la gauche vers la droite.
     









// Selecteurs
const body = document.querySelector("body");



// Listener
button.addEventListener("click", function() {
  if (body.classList.contains("light")) {
    body.classList.remove("light");
    body.classList.add("dark");
    button.innerText = "D√©couvrez tous mes projets ‚òÄÔ∏è";
   
  } else {
    body.classList.remove("dark");
    body.classList.add("light");
    button.innerText = "üåö D√©couvrez tous mes projets üåö";
    
  }
});



//Lorsque je clique sur le bouton : 
// Le fond de ma page change de couleur ainsi que la police d'√©citure. (Devient sombre et √©criture clair)


//Je cr√©e donc les blocs HTML
//Je cr√©e aussi les blocs CSS que je lie √† mon HTML
//Ensuite je cr√©e une page Javascript que je lie avec mon HTML juste au dessus de la balise </body>

//1. Je commence donc par cr√©er 2 constantes qui vont d√©clarer une r√©ference constante dans la suite de mon code
//Dans les deux const utilis√©s, j'utilise la m√©thode de l'interface Document pour utiliser querySelector.

//2. La deuxi√®me √©tape consiste √† r√©agir √† un √©venement : c'est √† dire utiliser un addEvenListener pour la class bouton et 
//de lui ajouter la fonction "clique" afin de r√©gir √† un √©venement. Cela va envoyer un √©lement √† sa cible √† chaque fois que 
//la fonction est appel√©e. 

//3. J'utilise l'instruction "if" qui va executer une instruction et me dire si sa condition est vraie :
//classList va renvoyer le nom de mes classes dans le CSS et modifier et ajouter une autre classe.
// Globalement cela signifie que si j'appuie sur le bouton et que ma classe ("light") est active alors 
//mon CSS va etre modifi√© de la facon suivante : la class light se retire et et la class dark s'ajoute.
//Ensuite la fonction InnerText va pemettre d'inserer et de remplacer un texte √† l'interieur de mon bouton
//(soit remplacer du contenu en JS)